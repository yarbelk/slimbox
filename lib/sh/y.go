// Code generated by goyacc -p Sh sh.y. DO NOT EDIT.

//line sh.y:6

package sh

import __yyfmt__ "fmt"

//line sh.y:7

//line sh.y:16
type ShSymType struct {
	yys   int
	empty struct{}
	val   int
	s     string
	wl    []string
}

const WORD = 57346
const ASSIGNMENT_WORD = 57347
const NAME = 57348
const NEWLINE = 57349
const IO_NUMBER = 57350
const AND_IF = 57351
const OR_IF = 57352
const DSEMI = 57353
const DLESS = 57354
const DGREAT = 57355
const LESSAND = 57356
const GREATAND = 57357
const LESSGREAT = 57358
const DLESSDASH = 57359
const CLOBBER = 57360
const If = 57361
const Then = 57362
const Else = 57363
const Elif = 57364
const Fi = 57365
const Do = 57366
const Done = 57367
const Case = 57368
const Esac = 57369
const While = 57370
const Until = 57371
const For = 57372
const Lbrace = 57373
const Rbrace = 57374
const Bang = 57375
const In = 57376

var ShToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"WORD",
	"ASSIGNMENT_WORD",
	"NAME",
	"NEWLINE",
	"IO_NUMBER",
	"AND_IF",
	"OR_IF",
	"DSEMI",
	"DLESS",
	"DGREAT",
	"LESSAND",
	"GREATAND",
	"LESSGREAT",
	"DLESSDASH",
	"CLOBBER",
	"If",
	"Then",
	"Else",
	"Elif",
	"Fi",
	"Do",
	"Done",
	"Case",
	"Esac",
	"While",
	"Until",
	"For",
	"Lbrace",
	"Rbrace",
	"Bang",
	"In",
	"'|'",
	"'('",
	"')'",
	"'<'",
	"'>'",
	"'&'",
	"';'",
}

var ShStatenames = [...]string{}

const ShEofCode = 1
const ShErrCode = 2
const ShInitialStackSize = 16

//line sh.y:235

//line yacctab:1
var ShExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 110,
	34, 104,
	-2, 111,
}

const ShPrivate = 57344

const ShLast = 434

var ShAct = [...]int{
	70, 2, 152, 139, 105, 69, 50, 150, 26, 151,
	3, 106, 59, 14, 123, 39, 51, 52, 65, 12,
	80, 37, 9, 60, 103, 62, 66, 8, 104, 88,
	53, 54, 6, 164, 100, 170, 71, 68, 57, 75,
	76, 77, 164, 124, 163, 47, 44, 41, 43, 45,
	48, 46, 146, 4, 79, 4, 93, 94, 95, 101,
	78, 162, 82, 83, 84, 85, 86, 87, 96, 137,
	66, 40, 42, 107, 98, 111, 8, 92, 90, 108,
	97, 113, 114, 110, 91, 136, 53, 54, 4, 109,
	4, 142, 141, 140, 142, 141, 166, 155, 112, 180,
	10, 118, 173, 4, 154, 49, 98, 108, 154, 73,
	126, 122, 58, 121, 125, 117, 115, 116, 128, 169,
	120, 132, 109, 154, 109, 89, 127, 159, 138, 55,
	56, 149, 130, 81, 135, 133, 153, 74, 144, 60,
	153, 17, 61, 143, 131, 135, 145, 156, 157, 16,
	158, 33, 96, 129, 25, 161, 165, 160, 32, 148,
	34, 35, 31, 29, 167, 147, 134, 72, 30, 168,
	119, 174, 171, 177, 178, 176, 175, 102, 24, 23,
	181, 182, 28, 27, 36, 22, 38, 21, 20, 179,
	47, 44, 41, 43, 45, 48, 46, 33, 19, 18,
	15, 13, 7, 5, 32, 1, 34, 35, 31, 29,
	0, 11, 0, 0, 30, 0, 40, 42, 28, 27,
	36, 0, 38, 0, 0, 172, 47, 44, 41, 43,
	45, 48, 46, 33, 0, 0, 0, 0, 0, 0,
	32, 0, 34, 35, 31, 29, 0, 11, 0, 0,
	30, 0, 40, 42, 28, 27, 36, 49, 38, 0,
	0, 0, 47, 44, 41, 43, 45, 48, 46, 33,
	0, 0, 0, 0, 0, 0, 32, 0, 34, 35,
	31, 29, 0, 11, 0, 0, 30, 0, 40, 42,
	28, 27, 36, 0, 38, 0, 0, 0, 47, 44,
	41, 43, 45, 48, 46, 33, 0, 0, 0, 0,
	0, 0, 32, 0, 34, 35, 31, 29, 0, 11,
	0, 0, 30, 0, 40, 42, 28, 27, 36, 0,
	38, 0, 0, 0, 47, 44, 41, 43, 45, 48,
	46, 33, 0, 0, 0, 0, 0, 0, 32, 0,
	34, 35, 31, 29, 0, 64, 63, 0, 30, 38,
	40, 42, 0, 47, 44, 41, 43, 45, 48, 46,
	99, 0, 0, 0, 38, 0, 0, 0, 47, 44,
	41, 43, 45, 48, 46, 0, 0, 67, 0, 40,
	42, 38, 0, 0, 0, 47, 44, 41, 43, 45,
	48, 46, 38, 0, 40, 42, 47, 44, 41, 43,
	45, 48, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 40, 42,
}

var ShPact = [...]int{
	96, -1000, 286, 98, -1000, 96, -1000, -10, 120, -1000,
	3, 322, -1000, -1000, 394, -1000, 351, 383, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1, -1000, -1000, -1000, 96,
	96, 103, 133, 96, 96, 96, -1000, -1000, 33, -1000,
	129, 129, 129, 129, 129, 129, 129, 121, 121, -1000,
	-1000, 250, 286, -1000, -1000, 96, 96, 96, 3, 394,
	-1000, 383, -1000, -1000, -1000, 366, -1000, -1000, -3, 27,
	286, -9, 83, -1000, 96, 78, 55, 55, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 120, 286, 286, 322, -1000, 366, -1000, -1000,
	96, -1000, 46, 120, -1000, -1000, 55, 9, 96, 96,
	98, 9, 96, -1000, -1000, -1000, -1000, -1000, 132, 286,
	96, 98, -1000, 81, -1000, 44, -1000, 96, 70, -1000,
	394, 120, -1000, 55, 48, 98, -1000, -1000, 104, 74,
	-1000, 96, 96, 394, -1000, 55, -1000, 100, 34, -1000,
	-1000, -1000, 7, 119, -1000, -1000, 76, -1000, -1000, -1000,
	-1000, -1000, -1000, 96, 115, -2, 96, 214, 91, -1000,
	96, 73, 96, 96, 178, 88, -1000, -1000, -1000, 96,
	96, -1000, -1000,
}

var ShPgo = [...]int{
	0, 205, 0, 203, 10, 32, 202, 17, 24, 22,
	100, 19, 201, 13, 12, 200, 199, 198, 188, 187,
	185, 179, 178, 5, 177, 170, 167, 4, 11, 14,
	166, 165, 159, 9, 7, 2, 3, 154, 153, 149,
	142, 18, 141, 8, 21, 15, 20, 29,
}

var ShR1 = [...]int{
	0, 1, 1, 3, 3, 5, 5, 6, 6, 8,
	8, 8, 9, 9, 10, 10, 11, 11, 11, 11,
	13, 13, 13, 13, 13, 13, 13, 17, 23, 23,
	24, 24, 18, 18, 18, 18, 26, 29, 30, 30,
	19, 19, 19, 32, 32, 31, 31, 33, 33, 33,
	33, 34, 34, 34, 34, 35, 35, 20, 20, 36,
	36, 36, 21, 22, 15, 38, 38, 37, 16, 27,
	12, 12, 12, 12, 12, 42, 40, 39, 39, 39,
	39, 41, 41, 41, 41, 14, 14, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 46, 45,
	45, 47, 4, 4, 2, 2, 7, 7, 25, 25,
	28, 28,
}

var ShR2 = [...]int{
	0, 3, 1, 3, 1, 2, 1, 3, 1, 1,
	4, 4, 1, 2, 1, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	3, 1, 3, 4, 6, 7, 1, 1, 2, 1,
	7, 7, 6, 2, 1, 2, 1, 3, 3, 4,
	4, 5, 5, 6, 6, 1, 3, 6, 5, 4,
	5, 2, 3, 3, 5, 1, 2, 1, 3, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2,
	2, 1, 1, 2, 1, 0, 1, 1, 2, 1,
	2, 1,
}

var ShChk = [...]int{
	-1000, -1, -2, -4, 7, -3, -5, -6, -8, -9,
	-10, 33, -11, -12, -13, -15, -39, -42, -16, -17,
	-18, -19, -20, -21, -22, -37, -43, 5, 4, 31,
	36, 30, 26, 19, 28, 29, 6, -44, 8, -45,
	38, 14, 39, 15, 13, 16, 18, 12, 17, 7,
	-2, -4, -7, 40, 41, 9, 10, 35, -10, -14,
	-43, -40, -43, 5, 4, -41, -43, 4, 36, -23,
	-2, -23, -26, 6, 4, -23, -23, -23, -44, -45,
	-46, 4, -46, -46, -46, -46, -46, -46, -47, 4,
	-47, -5, -8, -2, -2, -2, -43, -41, -43, 4,
	37, 32, -24, -8, 37, -27, -28, -2, 24, 41,
	-4, -2, 20, -27, -27, -9, -9, -11, -2, -25,
	-7, -4, -27, -29, 34, -23, -2, -29, -23, -38,
	-13, -8, -2, -28, -30, -4, 4, 25, -2, -36,
	23, 22, 21, -14, -27, -28, 4, -31, -32, 27,
	-34, -33, -35, 36, 4, 23, -23, -23, -27, 27,
	-33, -34, 27, 37, 35, -35, 20, -2, -23, 4,
	37, -23, 11, 11, -2, -23, -36, -2, -2, 11,
	11, -2, -2,
}

var ShDef = [...]int{
	105, -2, 2, 104, 102, 105, 4, 6, 8, 9,
	12, 0, 14, 16, 17, 19, 72, 74, 20, 21,
	22, 23, 24, 25, 26, 0, 77, 79, 75, 105,
	105, 0, 0, 105, 105, 105, 67, 87, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	1, 104, 5, 106, 107, 105, 105, 105, 13, 18,
	85, 71, 78, 80, 76, 73, 81, 83, 0, 0,
	0, 0, 105, 36, 105, 0, 0, 0, 88, 90,
	91, 98, 92, 93, 94, 95, 96, 97, 99, 101,
	100, 3, 7, 0, 0, 0, 86, 70, 82, 84,
	105, 68, 28, 31, 27, 32, 0, 0, 105, 105,
	-2, 0, 105, 62, 63, 10, 11, 15, 0, 29,
	105, 109, 33, 0, 37, 0, 110, 105, 0, 64,
	65, 30, 108, 0, 0, 111, 39, 69, 0, 0,
	58, 105, 105, 66, 34, 0, 38, 0, 0, 42,
	46, 44, 0, 0, 55, 57, 0, 61, 35, 40,
	43, 45, 41, 105, 0, 0, 105, 47, 48, 56,
	105, 59, 105, 105, 49, 50, 60, 51, 52, 105,
	105, 53, 54,
}

var ShTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 40, 3,
	36, 37, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 41,
	38, 3, 39, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 35,
}

var ShTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34,
}

var ShTok3 = [...]int{
	0,
}

var ShErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ShDebug        = 0
	ShErrorVerbose = false
)

type ShLexer interface {
	Lex(lval *ShSymType) int
	Error(s string)
}

type ShParser interface {
	Parse(ShLexer) int
	Lookahead() int
}

type ShParserImpl struct {
	lval  ShSymType
	stack [ShInitialStackSize]ShSymType
	char  int
}

func (p *ShParserImpl) Lookahead() int {
	return p.char
}

func ShNewParser() ShParser {
	return &ShParserImpl{}
}

const ShFlag = -1000

func ShTokname(c int) string {
	if c >= 1 && c-1 < len(ShToknames) {
		if ShToknames[c-1] != "" {
			return ShToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ShStatname(s int) string {
	if s >= 0 && s < len(ShStatenames) {
		if ShStatenames[s] != "" {
			return ShStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ShErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ShErrorVerbose {
		return "syntax error"
	}

	for _, e := range ShErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ShTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ShPact[state]
	for tok := TOKSTART; tok-1 < len(ShToknames); tok++ {
		if n := base + tok; n >= 0 && n < ShLast && ShChk[ShAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ShDef[state] == -2 {
		i := 0
		for ShExca[i] != -1 || ShExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ShExca[i] >= 0; i += 2 {
			tok := ShExca[i]
			if tok < TOKSTART || ShExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ShExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ShTokname(tok)
	}
	return res
}

func Shlex1(lex ShLexer, lval *ShSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ShTok1[0]
		goto out
	}
	if char < len(ShTok1) {
		token = ShTok1[char]
		goto out
	}
	if char >= ShPrivate {
		if char < ShPrivate+len(ShTok2) {
			token = ShTok2[char-ShPrivate]
			goto out
		}
	}
	for i := 0; i < len(ShTok3); i += 2 {
		token = ShTok3[i+0]
		if token == char {
			token = ShTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ShTok2[1] /* unknown char */
	}
	if ShDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ShTokname(token), uint(char))
	}
	return char, token
}

func ShParse(Shlex ShLexer) int {
	return ShNewParser().Parse(Shlex)
}

func (Shrcvr *ShParserImpl) Parse(Shlex ShLexer) int {
	var Shn int
	var ShVAL ShSymType
	var ShDollar []ShSymType
	_ = ShDollar // silence set and not used
	ShS := Shrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Shstate := 0
	Shrcvr.char = -1
	Shtoken := -1 // Shrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Shstate = -1
		Shrcvr.char = -1
		Shtoken = -1
	}()
	Shp := -1
	goto Shstack

ret0:
	return 0

ret1:
	return 1

Shstack:
	/* put a state and value onto the stack */
	if ShDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ShTokname(Shtoken), ShStatname(Shstate))
	}

	Shp++
	if Shp >= len(ShS) {
		nyys := make([]ShSymType, len(ShS)*2)
		copy(nyys, ShS)
		ShS = nyys
	}
	ShS[Shp] = ShVAL
	ShS[Shp].yys = Shstate

Shnewstate:
	Shn = ShPact[Shstate]
	if Shn <= ShFlag {
		goto Shdefault /* simple state */
	}
	if Shrcvr.char < 0 {
		Shrcvr.char, Shtoken = Shlex1(Shlex, &Shrcvr.lval)
	}
	Shn += Shtoken
	if Shn < 0 || Shn >= ShLast {
		goto Shdefault
	}
	Shn = ShAct[Shn]
	if ShChk[Shn] == Shtoken { /* valid shift */
		Shrcvr.char = -1
		Shtoken = -1
		ShVAL = Shrcvr.lval
		Shstate = Shn
		if Errflag > 0 {
			Errflag--
		}
		goto Shstack
	}

Shdefault:
	/* default state action */
	Shn = ShDef[Shstate]
	if Shn == -2 {
		if Shrcvr.char < 0 {
			Shrcvr.char, Shtoken = Shlex1(Shlex, &Shrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ShExca[xi+0] == -1 && ShExca[xi+1] == Shstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Shn = ShExca[xi+0]
			if Shn < 0 || Shn == Shtoken {
				break
			}
		}
		Shn = ShExca[xi+1]
		if Shn < 0 {
			goto ret0
		}
	}
	if Shn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Shlex.Error(ShErrorMessage(Shstate, Shtoken))
			Nerrs++
			if ShDebug >= 1 {
				__yyfmt__.Printf("%s", ShStatname(Shstate))
				__yyfmt__.Printf(" saw %s\n", ShTokname(Shtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Shp >= 0 {
				Shn = ShPact[ShS[Shp].yys] + ShErrCode
				if Shn >= 0 && Shn < ShLast {
					Shstate = ShAct[Shn] /* simulate a shift of "error" */
					if ShChk[Shstate] == ShErrCode {
						goto Shstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ShDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ShS[Shp].yys)
				}
				Shp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ShDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ShTokname(Shtoken))
			}
			if Shtoken == ShEofCode {
				goto ret1
			}
			Shrcvr.char = -1
			Shtoken = -1
			goto Shnewstate /* try again in the same state */
		}
	}

	/* reduction by production Shn */
	if ShDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Shn, ShStatname(Shstate))
	}

	Shnt := Shn
	Shpt := Shp
	_ = Shpt // guard against "declared and not used"

	Shp -= ShR2[Shn]
	// Shp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Shp+1 >= len(ShS) {
		nyys := make([]ShSymType, len(ShS)*2)
		copy(nyys, ShS)
		ShS = nyys
	}
	ShVAL = ShS[Shp+1]

	/* consult goto table to find next state */
	Shn = ShR1[Shn]
	Shg := ShPgo[Shn]
	Shj := Shg + ShS[Shp].yys + 1

	if Shj >= ShLast {
		Shstate = ShAct[Shg]
	} else {
		Shstate = ShAct[Shj]
		if ShChk[Shstate] != -Shn {
			Shstate = ShAct[Shg]
		}
	}
	// dummy call; replaced with literal code
	switch Shnt {

	}
	goto Shstack /* stack new state and value */
}
