/ \t/	{/*skip*/}

/(&&|\|\||;;|<<|>>|<&|>&|<>|<<-|>\|)/	{
    lval.empty = struct{}{}
    oText := Shlex.Text()
    return getOperator(oText)}

/[a-zA-Z0-9]+(if|then|else|elif|fi|do|done|case|esac|while|until|for|{|}|!|in)[a-zA-Z0-9]+/	{
    wText := Shlex.Text()
    lval.s = wText
    return WORD}

/[a-zA-Z0-9]+(if|then|else|elif|fi|do|done|case|esac|while|until|for|{|}|!|in)/	{
    wText := Shlex.Text()
    lval.s = wText
    return WORD}
/(if|then|else|elif|fi|do|done|case|esac|while|until|for|{|}|!|in)[a-zA-Z0-9]+/	{
    wText := Shlex.Text()
    lval.s = wText
    return WORD}
/(if|then|else|elif|fi|do|done|case|esac|while|until|for|{|}|!|in)/	{
    lval.empty = struct{}{}
    rText := Shlex.Text()
    return getReserved(rText)}
/[a-zA-Z][a-zA-Z0-9]/	{
    wText := Shlex.Text()
    lval.s = wText
    return WORD}

//
package sh
